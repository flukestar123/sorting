A very imp question now see you have to use method of inversion count here and that is done by the standard merge sort now if you use merge sort you can get count
 for every element you can do this but after the merge sort the elements will become sorted but here in this question it is asking to return the count array but if ele
 get sorted they loose their original positon so we have to find a way to place the count of the element at its original place and below method helps us in achieving 
 that we create vector of pairs and then we store the element wth its original index then what we do is we store the count in count array at the ele original index
 this trick did not click so be sure to remember this....
 
   void merge(vector<pair<int,int>>&nums,int start,int end,vector<int>&count)
    {
        int mid=(start+end)/2;
        int i,j,count1=0;

        i=start,j=mid+1;
        vector<pair<int,int>> v;
        while(i<mid+1&&j<end+1)
        {
           if(nums[i].first<=nums[j].first)
           {
               v.push_back({nums[i].first,nums[i].second});
               count[nums[i].second]+=count1;
               i++;
           }
        else
        {
            v.push_back({nums[j].first,nums[j].second});
            count1++;
            j++;
        }
        }
        while(i<mid+1)
        {
             v.push_back({nums[i].first,nums[i].second});
             count[nums[i].second]+=count1;
            i++;
        }
        while(j<end+1)
        {
              v.push_back({nums[j].first,nums[j].second});
            j++;
        }
      int   k=0;
        for(i=start;i<=end;i++)
        {
             nums[i]=v[k];
             k++;
        }
    }
    void merge_sort(vector<pair<int,int>>&nums,int lo,int hi,vector<int> &count)
    {
        if(lo<hi)
        {
            int mid=(lo+hi)/2;
            merge_sort(nums,lo,mid,count);
            merge_sort(nums,mid+1,hi,count);
            merge(nums,lo,hi,count);
        }

    }
    vector<int> countSmaller(vector<int>& nums) {
///same concept as the inversion count;
        int n=nums.size();
vector<pair<int,int>> temp;
    vector<int> count(n,0);
    int i;
for(i=0;i<n;i++)
{
    temp.push_back({nums[i],i});
}
        merge_sort(temp,0,n-1,count);
        return count;
    }
